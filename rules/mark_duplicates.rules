# Runs out of java heap space if using miniconda default.
# To correct, add desired memory to jvm_mem_opts in the picard shell wrapper:
# miniconda3/envs/potato/share/picard-2.14.1-0/picard 
# Edit the line jmp_mem_opts=""
# I doubled the heap space from the default: -Xms512m -Xmx1g. This seemed to work fine.

# Picard memory update 16 Feb 2018: 2G throws OutOfMemory error when dedup aligned PL4 reads
# I increased heap space to 4G, i.e., -Xms512m -Xmx4g

# Added wrapper-independent implementation to specify java heap space on command line
# for implementing on cluster.

rule mark_duplicates:
    input:
        "data/merged/{sample}.bam"
    output:
        bam="data/dedup/{sample}.bam",
        metrics="data/dedup/{sample}-metrics.txt"
    log:
        "log/picard/{sample}.log"
    params:
        # jarpath=config["params"]["mark_duplicates"]["jarpath"],
        # java_heap=config["params"]["mark_duplicates"]["java_heap"],
        opt=config["params"]["mark_duplicates"]["opt"]
    shell: """
        picard MarkDuplicates \
            INPUT={input} \
            OUTPUT={output.bam} \
            METRICS_FILE={output.metrics} \
            {params.opt} \
            2> {log}
    """
        # when needing to specify JVM allocation manually
        # "java {params.java_heap} -jar {params.jarpath} MarkDuplicates INPUT={input} "
        # "OUTPUT={output.bam} METRICS_FILE={output.metrics} {params.opt} 2> {log}"